{"version":3,"file":"main.js","sources":["../src/index.ts"],"sourcesContent":["const name: string = \"ss\";\n\n// ts安装后 内置了很多全局类型\n// 解决冲突就用模块化\n// 人为的h\n\n// string 和 String区别\n// 基本类型。  实例\n\n// 元组\nlet tuple: [string, number] = [\"abc\", 1231];\n\ntuple.push(\"s\");\n\n// 枚举\n// 1）普通枚举\nenum STATUS_CODE {\n  NOT_FOUND = 404,\n  NOT_ALLOWED = 405,\n  ERROR = 400,\n}\n\n// 2) 异构枚举\nconst enum STATUS_CODE_2 {\n  NOT_FOUND = 404,\n  NOT_ALLOWED = \"405\",\n}\n\n// 8) void\n// 9) never 特殊类型 never是任何类型的子类型 可以赋给其他类型  但是其他类型不能赋给他\nfunction whileTrue(): never {\n  while (true) {}\n}\n// never 用途\n// 1） 完整性保护\n// 方形圆形矩形\n// ts语法 声明一个类型 字面量类型\ntype ISquare =  { width: number,kind: \"square\" }\ntype IRect = { width: number; height: number,kind: \"rectangle\" }\ntype ICircle = | { r: number,kind:\"circle\" };\n\nfunction getArea(obj: ISquare|IRect|ICircle) {\n    if(obj.kind === 'square'){\n        return obj.width * obj.width\n    }\n\n    if(obj.kind === 'rectangle'){\n        return obj.width * obj.height\n    }\n\n    if(obj.kind === 'circle'){\n        return obj.r * obj.r\n    }\n\n    validate(obj)\n}\n\nfunction validate(obj:never){\n\n}\n\nfunction reactive(obj:object){\n\n}\n\nreactive(function(){\n    \n})\n\n\n\nexport {};"],"names":[],"mappings":";;;EAcA;EACA;EACA,IAAK,WAIJ,CAAA;EAJD,CAAA,UAAK,WAAW,EAAA;EACd,IAAA,WAAA,CAAA,WAAA,CAAA,WAAA,CAAA,GAAA,GAAA,CAAA,GAAA,WAAe,CAAA;EACf,IAAA,WAAA,CAAA,WAAA,CAAA,aAAA,CAAA,GAAA,GAAA,CAAA,GAAA,aAAiB,CAAA;EACjB,IAAA,WAAA,CAAA,WAAA,CAAA,OAAA,CAAA,GAAA,GAAA,CAAA,GAAA,OAAW,CAAA;EACb,CAAC,EAJI,WAAW,KAAX,WAAW,GAIf,EAAA,CAAA,CAAA,CAAA;EAED;EACA,IAAW,aAGV,CAAA;EAHD,CAAA,UAAW,aAAa,EAAA;EACtB,IAAA,aAAA,CAAA,aAAA,CAAA,WAAA,CAAA,GAAA,GAAA,CAAA,GAAA,WAAe,CAAA;EACf,IAAA,aAAA,CAAA,aAAA,CAAA,GAAA,KAAmB,CAAA;EACrB,CAAC,EAHU,aAAa,KAAb,aAAa,GAGvB,EAAA,CAAA,CAAA;;;;;;"}